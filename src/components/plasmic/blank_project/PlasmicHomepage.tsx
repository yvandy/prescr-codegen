// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bJSLnzQiU882Sm76eQ6ECs
// Component: g2haT3nDznE1
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DatePicker } from "antd"; // plasmic-import: yziodUb9Qv/codeComponent
import { Slider } from "antd"; // plasmic-import: ydfcbYgt_N/codeComponent
import AntdFormInput from "../../AntdFormInput"; // plasmic-import: RJj2IYTf9q/component
import AntdMedicineInput from "../../AntdMedicineInput"; // plasmic-import: fREaV0xT9x/component
import AntdFormSubmit from "../../AntdFormSubmit"; // plasmic-import: P0m14OaWFw/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: bJSLnzQiU882Sm76eQ6ECs/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: g2haT3nDznE1/css

import logoPngMpfjE2YMk from "../presc_codegen/images/logoPng.png"; // plasmic-import: MpfjE2yMK/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  medicine?: string;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("medicine");

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<"img">;
  datePicker?: p.Flex<typeof DatePicker>;
  slider?: p.Flex<typeof Slider>;
  antdFormSubmit?: p.Flex<typeof AntdFormSubmit>;
};

export interface DefaultHomepageProps {
  medicine?: string;
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__jQXn)} />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__jET2)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__ucks8)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__yz8Je
                )}
              >
                {"Prescription Form"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___6OPoA
                )}
              >
                {"With us, you feel Secure"}
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__ltVbz)}>
                <img
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(defaultcss.img, sty.img)}
                  role={"img"}
                  src={logoPngMpfjE2YMk}
                />
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox___4NJqr)}
            >
              <DatePicker
                data-plasmic-name={"datePicker"}
                data-plasmic-override={overrides.datePicker}
                className={classNames("__wab_instance", sty.datePicker)}
              />

              <Slider
                data-plasmic-name={"slider"}
                data-plasmic-override={overrides.slider}
                className={classNames("__wab_instance", sty.slider)}
                range={false}
                vertical={false}
              />
            </p.Stack>

            <AntdFormInput
              className={classNames("__wab_instance", sty.antdFormInput__xd91G)}
              label={"Name" as const}
              name={"patientName" as const}
              type={"text" as const}
            />

            <AntdFormInput
              className={classNames("__wab_instance", sty.antdFormInput__rmtX2)}
              label={"Age" as const}
              name={"patientAge" as const}
              type={"number" as const}
            />

            <AntdFormInput
              className={classNames("__wab_instance", sty.antdFormInput__rgmsz)}
              label={"ID" as const}
              name={"patientID" as const}
              type={"text" as const}
            />

            <AntdMedicineInput
              className={classNames(
                "__wab_instance",
                sty.antdMedicineInput__y9Csf
              )}
              label={"Medicine 1" as const}
              name={"medicine1" as const}
            />

            <AntdMedicineInput
              className={classNames(
                "__wab_instance",
                sty.antdMedicineInput__atb4D
              )}
              label={"Medicine 2" as const}
              name={"medicine2" as const}
            />

            <AntdFormSubmit
              data-plasmic-name={"antdFormSubmit"}
              data-plasmic-override={overrides.antdFormSubmit}
              className={classNames("__wab_instance", sty.antdFormSubmit)}
            />
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "datePicker", "slider", "antdFormSubmit"],
  img: ["img"],
  datePicker: ["datePicker"],
  slider: ["slider"],
  antdFormSubmit: ["antdFormSubmit"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: "img";
  datePicker: typeof DatePicker;
  slider: typeof Slider;
  antdFormSubmit: typeof AntdFormSubmit;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    datePicker: makeNodeComponent("datePicker"),
    slider: makeNodeComponent("slider"),
    antdFormSubmit: makeNodeComponent("antdFormSubmit"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
