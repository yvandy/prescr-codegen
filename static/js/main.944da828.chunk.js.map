{"version":3,"sources":["components/plasmic/blank_project/plasmic_blank_project.module.css","components/AntdFormInput.tsx","components/AntdMedicineInput.tsx","components/AntdFormSubmit.tsx","components/plasmic/blank_project/PlasmicHomepage.tsx","components/Homepage.tsx","host.tsx","App.tsx","store/index.tsx","index.tsx","components/plasmic/blank_project/PlasmicHomepage.module.css","components/plasmic/plasmic__default_style.module.css"],"names":["module","exports","AntdFormInput_","props","ref","inputEle","type","format","icon","UploadOutlined","Item","className","label","name","rules","required","message","AntdFormInput","React","AntdMedicineInput_","medicines","useSelector","state","medicineData","key","push","id","value","Group","compact","noStyle","defaultValue","style","width","options","placeholder","AntdMedicineInput","AntdFormSubmit_","htmlType","AntdFormSubmit","PlasmicHomepage__VariantProps","Array","PlasmicHomepage__ArgProps","PlasmicDescendants","root","datePicker","slider","antdFormSubmit","makeNodeComponent","nodeName","func","deriveRenderOpts","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","dataFetches","defaultcss","as","hasGap","classNames","projectcss","sty","range","vertical","PlasmicHomepage__RenderFunc","displayName","PlasmicHomepage","Object","assign","internalVariantProps","internalArgProps","Homepage_","submitDispatch","useDispatch","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","console","log","payload","onFinishFailed","errorInfo","Homepage","registerComponent","Input","disabled","importPath","Slider","DatePicker","Host","App","dispatchMed","fetchMedicine","a","fetch","response","json","useEffect","path","initialState","formValues","store","createStore","action","submitPrescription","method","body","JSON","stringify","precription","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.944da828.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root_reset\":\"plasmic_blank_project_root_reset__2k_le\"};","import * as React from \"react\";\r\nimport {\r\n  DefaultAntdFormInputProps\r\n} from \"./plasmic/blank_project/PlasmicAntdFormInput\";\r\nimport { HTMLElementRefOf } from \"@plasmicapp/react-web\";\r\nimport { Button, DatePicker, Form, Input, InputNumber, Upload } from \"antd\";\r\nimport { UploadOutlined } from '@ant-design/icons';\r\n\r\ninterface AntdFormInputProps extends DefaultAntdFormInputProps { }\r\n\r\nfunction AntdFormInput_(\r\n  props: AntdFormInputProps,\r\n  ref: HTMLElementRefOf<\"div\">\r\n) {\r\n\r\n  let inputEle;\r\n\r\n  switch (props.type) {\r\n    case \"number\": {\r\n      inputEle = <InputNumber />\r\n      break;\r\n    }\r\n    case \"date\": {\r\n      inputEle = <DatePicker format=\"YYYY-MM-DD HH:mm:ss\" />\r\n      break;\r\n    }\r\n    case \"upload\": {\r\n      inputEle = <Upload>\r\n        <Button icon={<UploadOutlined />}>Upload</Button>\r\n      </Upload>\r\n      break;\r\n    }\r\n    default: {\r\n      inputEle = <Input />\r\n      break;\r\n    }\r\n  }\r\n  return (\r\n    <Form.Item className={props.className}\r\n      label={props.label}\r\n      name={props.name}\r\n      rules={[\r\n        {\r\n          required: false,\r\n          message: 'Please input your patient name!',\r\n        },\r\n      ]}\r\n    >\r\n      {inputEle}\r\n    </Form.Item>\r\n\r\n  )\r\n}\r\nconst AntdFormInput = React.forwardRef(AntdFormInput_);\r\nexport default AntdFormInput;\r\n","\r\nimport * as React from \"react\";\r\nimport {\r\n  PlasmicAntdMedicineInput,\r\n  DefaultAntdMedicineInputProps\r\n} from \"./plasmic/presc_codegen/PlasmicAntdMedicineInput\";\r\nimport { HTMLElementRefOf } from \"@plasmicapp/react-web\";\r\nimport { Form, Input, InputNumber, Select } from \"antd\";\r\nimport { useSelector } from 'react-redux';\r\nimport { MedicineItem, StateItem } from \"../typings/types\";\r\n\r\ninterface AntdMedicineInputProps extends DefaultAntdMedicineInputProps {\r\n  name: string;\r\n}\r\n\r\nfunction AntdMedicineInput_(\r\n  props: AntdMedicineInputProps,\r\n  ref: HTMLElementRefOf<\"div\">\r\n) {\r\n  const medicines = useSelector((state: StateItem) => state.medicines);\r\n\r\n  const medicineData: MedicineItem[] = [];\r\n\r\n  for (const key in medicines) {\r\n    medicineData.push({\r\n      id: key,\r\n      label: medicines[key].name,\r\n      value: medicines[key].value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Form.Item className={props.className} label={props.label}>\r\n      <Input.Group compact>\r\n        <Form.Item\r\n          name={[props.name, 'name']}\r\n          noStyle\r\n        >\r\n          <Select defaultValue=\"Medication\" style={{ width: '60%' }} options={medicineData}></Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name={[props.name, 'dosage']}\r\n          noStyle\r\n        >\r\n          <InputNumber style={{ width: '40%' }} placeholder=\"Dosage\" />\r\n        </Form.Item>\r\n      </Input.Group>\r\n    </Form.Item>\r\n  )\r\n}\r\nconst AntdMedicineInput = React.forwardRef(AntdMedicineInput_);\r\nexport default AntdMedicineInput;\r\n","import * as React from \"react\";\r\nimport {\r\n  PlasmicAntdFormSubmit,\r\n  DefaultAntdFormSubmitProps\r\n} from \"./plasmic/blank_project/PlasmicAntdFormSubmit\";\r\nimport { HTMLElementRefOf } from \"@plasmicapp/react-web\";\r\nimport { Button } from \"antd\";\r\n\r\ninterface AntdFormSubmitProps extends DefaultAntdFormSubmitProps { }\r\n\r\nfunction AntdFormSubmit_(\r\n  props: AntdFormSubmitProps,\r\n  ref: HTMLElementRefOf<\"div\">\r\n) {\r\n\r\n  return (\r\n    <Button className={props.className} type=\"primary\" htmlType=\"submit\">\r\n      Submit\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst AntdFormSubmit = React.forwardRef(AntdFormSubmit_);\r\nexport default AntdFormSubmit;\r\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: bJSLnzQiU882Sm76eQ6ECs\n// Component: g2haT3nDznE1\nimport * as React from \"react\";\n\nimport * as p from \"@plasmicapp/react-web\";\n\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants\n} from \"@plasmicapp/react-web\";\nimport { DatePicker } from \"antd\"; // plasmic-import: yziodUb9Qv/codeComponent\nimport { Slider } from \"antd\"; // plasmic-import: ydfcbYgt_N/codeComponent\nimport AntdFormInput from \"../../AntdFormInput\"; // plasmic-import: RJj2IYTf9q/component\nimport AntdMedicineInput from \"../../AntdMedicineInput\"; // plasmic-import: fREaV0xT9x/component\nimport AntdFormSubmit from \"../../AntdFormSubmit\"; // plasmic-import: P0m14OaWFw/component\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\";\nimport * as defaultcss from \"../plasmic__default_style.module.css\"; // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_blank_project.module.css\"; // plasmic-import: bJSLnzQiU882Sm76eQ6ECs/projectcss\nimport * as sty from \"./PlasmicHomepage.module.css\"; // plasmic-import: g2haT3nDznE1/css\n\nexport type PlasmicHomepage__VariantMembers = {};\n\nexport type PlasmicHomepage__VariantsArgs = {};\ntype VariantPropType = keyof PlasmicHomepage__VariantsArgs;\nexport const PlasmicHomepage__VariantProps = new Array<VariantPropType>();\n\nexport type PlasmicHomepage__ArgsType = {\n  medicine?: string;\n};\n\ntype ArgPropType = keyof PlasmicHomepage__ArgsType;\nexport const PlasmicHomepage__ArgProps = new Array<ArgPropType>(\"medicine\");\n\nexport type PlasmicHomepage__OverridesType = {\n  root?: p.Flex<\"div\">;\n  datePicker?: p.Flex<typeof DatePicker>;\n  slider?: p.Flex<typeof Slider>;\n  antdFormSubmit?: p.Flex<typeof AntdFormSubmit>;\n};\n\nexport interface DefaultHomepageProps {\n  medicine?: string;\n  className?: string;\n}\n\nfunction PlasmicHomepage__RenderFunc(props: {\n  variants: PlasmicHomepage__VariantsArgs;\n  args: PlasmicHomepage__ArgsType;\n  overrides: PlasmicHomepage__OverridesType;\n  dataFetches?: PlasmicHomepage__Fetches;\n  forNode?: string;\n}) {\n  const { variants, args, overrides, forNode, dataFetches } = props;\n\n  return (\n    <React.Fragment>\n      {}\n      {}\n\n      <div className={defaultcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            defaultcss.all,\n            projectcss.root_reset,\n            sty.root\n          )}\n        >\n          <div className={classNames(defaultcss.all, sty.freeBox__jQXn)} />\n\n          <p.Stack\n            as={\"div\"}\n            hasGap={true}\n            className={classNames(defaultcss.all, sty.freeBox__jET2)}\n          >\n            <p.Stack\n              as={\"div\"}\n              hasGap={true}\n              className={classNames(defaultcss.all, sty.freeBox__ucks8)}\n            >\n              <div\n                className={classNames(\n                  defaultcss.all,\n                  defaultcss.__wab_text,\n                  sty.freeBox__yz8Je\n                )}\n              >\n                {\"Prescription Form\"}\n              </div>\n\n              <div\n                className={classNames(\n                  defaultcss.all,\n                  defaultcss.__wab_text,\n                  sty.freeBox___6OPoA\n                )}\n              >\n                {\"With us, you feel Secure\"}\n              </div>\n            </p.Stack>\n\n            <p.Stack\n              as={\"div\"}\n              hasGap={true}\n              className={classNames(defaultcss.all, sty.freeBox___4NJqr)}\n            >\n              <DatePicker\n                data-plasmic-name={\"datePicker\"}\n                data-plasmic-override={overrides.datePicker}\n                className={classNames(\"__wab_instance\", sty.datePicker)}\n              />\n\n              <Slider\n                data-plasmic-name={\"slider\"}\n                data-plasmic-override={overrides.slider}\n                className={classNames(\"__wab_instance\", sty.slider)}\n                range={false}\n                vertical={false}\n              />\n            </p.Stack>\n\n            <AntdFormInput\n              className={classNames(\"__wab_instance\", sty.antdFormInput__xd91G)}\n              label={\"Name\" as const}\n              name={\"patientName\" as const}\n              type={\"text\" as const}\n            />\n\n            <AntdFormInput\n              className={classNames(\"__wab_instance\", sty.antdFormInput__rmtX2)}\n              label={\"Age\" as const}\n              name={\"patientAge\" as const}\n              type={\"number\" as const}\n            />\n\n            <AntdFormInput\n              className={classNames(\"__wab_instance\", sty.antdFormInput__rgmsz)}\n              label={\"ID\" as const}\n              name={\"patientID\" as const}\n              type={\"text\" as const}\n            />\n\n            <AntdMedicineInput\n              className={classNames(\n                \"__wab_instance\",\n                sty.antdMedicineInput__y9Csf\n              )}\n              label={\"Medicine 1\" as const}\n              name={\"medicine1\" as const}\n            />\n\n            <AntdMedicineInput\n              className={classNames(\n                \"__wab_instance\",\n                sty.antdMedicineInput__atb4D\n              )}\n              label={\"Medicine 2\" as const}\n              name={\"medicine2\" as const}\n            />\n\n            <AntdFormSubmit\n              data-plasmic-name={\"antdFormSubmit\"}\n              data-plasmic-override={overrides.antdFormSubmit}\n              className={classNames(\"__wab_instance\", sty.antdFormSubmit)}\n            />\n          </p.Stack>\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  ) as React.ReactElement | null;\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"datePicker\", \"slider\", \"antdFormSubmit\"],\n  datePicker: [\"datePicker\"],\n  slider: [\"slider\"],\n  antdFormSubmit: [\"antdFormSubmit\"]\n} as const;\ntype NodeNameType = keyof typeof PlasmicDescendants;\ntype DescendantsType<T extends NodeNameType> =\n  typeof PlasmicDescendants[T][number];\ntype NodeDefaultElementType = {\n  root: \"div\";\n  datePicker: typeof DatePicker;\n  slider: typeof Slider;\n  antdFormSubmit: typeof AntdFormSubmit;\n};\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\";\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicHomepage__OverridesType,\n  DescendantsType<T>\n>;\ntype NodeComponentProps<T extends NodeNameType> =\n  // Explicitly specify variants, args, and overrides as objects\n  {\n    variants?: PlasmicHomepage__VariantsArgs;\n    args?: PlasmicHomepage__ArgsType;\n    overrides?: NodeOverridesType<T>;\n    dataFetches?: PlasmicHomepage__Fetches;\n  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n    // Specify args directly as props\n    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &\n    // Specify overrides for each element directly as props\n    Omit<\n      NodeOverridesType<T>,\n      ReservedPropsType | VariantPropType | ArgPropType\n    > &\n    // Specify props for the root element\n    Omit<\n      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n    >;\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHomepage__ArgProps,\n      internalVariantPropNames: PlasmicHomepage__VariantProps\n    });\n\n    const { dataFetches } = props;\n\n    return PlasmicHomepage__RenderFunc({\n      variants,\n      args,\n      overrides,\n      dataFetches,\n      forNode: nodeName\n    });\n  };\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHomepage\";\n  } else {\n    func.displayName = `PlasmicHomepage.${nodeName}`;\n  }\n  return func;\n}\n\nexport const PlasmicHomepage = Object.assign(\n  // Top-level PlasmicHomepage renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    datePicker: makeNodeComponent(\"datePicker\"),\n    slider: makeNodeComponent(\"slider\"),\n    antdFormSubmit: makeNodeComponent(\"antdFormSubmit\"),\n\n    // Metadata about props expected for PlasmicHomepage\n    internalVariantProps: PlasmicHomepage__VariantProps,\n    internalArgProps: PlasmicHomepage__ArgProps\n  }\n);\n\nexport default PlasmicHomepage;\n/* prettier-ignore-end */\n","import * as React from \"react\";\r\nimport {\r\n  PlasmicHomepage,\r\n  DefaultHomepageProps\r\n} from \"./plasmic/blank_project/PlasmicHomepage\";\r\nimport { HTMLElementRefOf } from \"@plasmicapp/react-web\";\r\nimport { Form } from \"antd\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { FormItem } from \"../typings/types\";\r\n\r\ninterface HomepageProps extends DefaultHomepageProps { }\r\n\r\nfunction Homepage_(props: HomepageProps, ref: HTMLElementRefOf<\"div\">) {\r\n  const submitDispatch = useDispatch();\r\n\r\n  const onFinish = (values: FormItem) => {\r\n    console.log(values, 12);\r\n    submitDispatch({\r\n      type: \"submit\",\r\n      payload: values\r\n    })\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return <Form name=\"basic\"\r\n    labelCol={{ span: 8 }}\r\n    wrapperCol={{ span: 16 }}\r\n    initialValues={{ remember: true }}\r\n    onFinish={onFinish}\r\n    onFinishFailed={onFinishFailed}>\r\n    <PlasmicHomepage root={{ ref }} {...props} />;\r\n  </Form>\r\n}\r\nconst Homepage = React.forwardRef(Homepage_);\r\nexport default Homepage;","import * as React from \"react\";\r\nimport { PlasmicCanvasHost, registerComponent } from \"@plasmicapp/host\";\r\nimport { Button, DatePicker, Input, Slider } from \"antd\";\r\nregisterComponent(Input, {\r\n    name: \"Input\",\r\n    props: {\r\n        disabled: \"boolean\",\r\n        vertical: \"boolean\",\r\n        placeholder: \"string\"\r\n    },\r\n    importPath: \"antd\",\r\n});\r\n\r\nregisterComponent(Slider, {\r\n    name: \"Slider\",\r\n    props: {\r\n        disabled: \"boolean\",\r\n        range: \"boolean\",\r\n        vertical: \"boolean\",\r\n    },\r\n    importPath: \"antd\",\r\n});\r\n\r\nregisterComponent(DatePicker, {\r\n    name: \"DatePicker\",\r\n    props: {\r\n        disabled: \"boolean\",\r\n        vertical: \"boolean\",\r\n        placeholder: \"string\"\r\n    },\r\n    importPath: \"antd\",\r\n});\r\n\r\nfunction Host() {\r\n    return (\r\n        <PlasmicCanvasHost />\r\n    );\r\n}\r\n\r\nexport default Host;\r\n","import { Fragment, useEffect } from 'react';\r\nimport './App.css';\r\nimport Homepage from './components/Homepage';\r\nimport 'antd/dist/antd.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Host from './host';\r\nfunction App() {\r\n  // Load medicines dropdown data\r\n\r\n  const dispatchMed = useDispatch();\r\n\r\n  const fetchMedicine = async () => {\r\n    const response = await fetch('https://prescription-app-84502-default-rtdb.firebaseio.com/medicines.json');\r\n    const medicines = await response.json();\r\n    dispatchMed({ type: \"loadMedicines\", payload: medicines }); // update store\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMedicine();\r\n  })\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/host\">\r\n            <Host />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Homepage />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","import { createStore } from \"redux\";\r\nimport { ActionItem, StateItem } from \"../typings/types\";\r\n\r\nconst initialState: StateItem = {\r\n    medicines: {\r\n    },\r\n    formValues: {\r\n    },\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionItem): StateItem => {\r\n    switch (action.type) {\r\n        case \"loadMedicines\":\r\n            return {\r\n                ...state,\r\n                medicines: action.payload,\r\n            }\r\n        case \"submit\":\r\n            const submitPrescription = async () => {\r\n                await fetch('https://prescription-app-84502-default-rtdb.firebaseio.com/prescriptions.json', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        precription: action.payload,\r\n                    })\r\n                });\r\n                alert(\"Data Submitted Successfully.\");\r\n            }\r\n            submitPrescription();\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from \"react-redux\";\r\nimport store from './store/index'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider >,\r\n  document.getElementById('root')\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PlasmicHomepage_root__ATwUp\",\"freeBox__jQXn\":\"PlasmicHomepage_freeBox__jQXn__2MKn7\",\"freeBox__jET2\":\"PlasmicHomepage_freeBox__jET2__1P6jt\",\"freeBox__ucks8\":\"PlasmicHomepage_freeBox__ucks8__1FqEq\",\"freeBox__yz8Je\":\"PlasmicHomepage_freeBox__yz8Je__4kM1E\",\"freeBox___6OPoA\":\"PlasmicHomepage_freeBox___6OPoA__1tQYG\",\"freeBox___4NJqr\":\"PlasmicHomepage_freeBox___4NJqr__1MKfn\",\"datePicker\":\"PlasmicHomepage_datePicker__3rCoc\",\"slider\":\"PlasmicHomepage_slider__3Dumz\",\"antdFormInput__xd91G\":\"PlasmicHomepage_antdFormInput__xd91G__2jNLA\",\"antdFormInput__rmtX2\":\"PlasmicHomepage_antdFormInput__rmtX2__djkcN\",\"antdFormInput__rgmsz\":\"PlasmicHomepage_antdFormInput__rgmsz__3q-5l\",\"antdMedicineInput__y9Csf\":\"PlasmicHomepage_antdMedicineInput__y9Csf__2jHAn\",\"antdMedicineInput__atb4D\":\"PlasmicHomepage_antdMedicineInput__atb4D__1gbZR\",\"antdFormSubmit\":\"PlasmicHomepage_antdFormSubmit__HYdp6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"all\":\"plasmic__default_style_all__JnZad\",\"img\":\"plasmic__default_style_img__p9_zN plasmic__default_style_all__JnZad\",\"input\":\"plasmic__default_style_input__390KA plasmic__default_style_all__JnZad\",\"textarea\":\"plasmic__default_style_textarea__7Ey-f plasmic__default_style_all__JnZad\",\"button\":\"plasmic__default_style_button__IQUy7 plasmic__default_style_all__JnZad\",\"code\":\"plasmic__default_style_code__3cd-h plasmic__default_style_all__JnZad\",\"pre\":\"plasmic__default_style_pre__2OFGD plasmic__default_style_all__JnZad\",\"h1\":\"plasmic__default_style_h1__2jms5 plasmic__default_style_all__JnZad\",\"h2\":\"plasmic__default_style_h2__YOEL1 plasmic__default_style_all__JnZad\",\"h3\":\"plasmic__default_style_h3__29YHU plasmic__default_style_all__JnZad\",\"h4\":\"plasmic__default_style_h4__P9L3U plasmic__default_style_all__JnZad\",\"h5\":\"plasmic__default_style_h5__2lrO7 plasmic__default_style_all__JnZad\",\"h6\":\"plasmic__default_style_h6__2KDp4 plasmic__default_style_all__JnZad\",\"address\":\"plasmic__default_style_address__3E15a plasmic__default_style_all__JnZad\",\"ol\":\"plasmic__default_style_ol__1HfNa plasmic__default_style_all__JnZad\",\"ul\":\"plasmic__default_style_ul__QQK4I plasmic__default_style_all__JnZad\",\"select\":\"plasmic__default_style_select__2N1Cs plasmic__default_style_all__JnZad\",\"li\":\"plasmic__default_style_li__ITqB8 plasmic__default_style_all__JnZad\",\"plasmic_default__component_wrapper\":\"plasmic__default_style_plasmic_default__component_wrapper__1ZEyg\",\"__wab_text\":\"plasmic__default_style___wab_text__1mn0q\",\"plasmic_page_wrapper\":\"plasmic__default_style_plasmic_page_wrapper__i75bH\"};"],"sourceRoot":""}